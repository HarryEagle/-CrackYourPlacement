/* OPTIMAL APPROACH */

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int> ump;

        int cnt = 0 , sum = 0;

        ump[sum] = 1;

        for(auto it : nums){
            sum += it;

            if(ump.find(sum-k) != ump.end()){
                cnt = cnt + ump[sum-k];
            }
            ump[sum]++;
        }
        return cnt;
    }
};

/* BRUTE FORCE */

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int ans = 0;
        int n = nums.size();
        int sum = 0;

        for(int i = 0 ; i < n ; i++){
            for(int j = i ; j < n ; j++){
                sum += nums[j];
                if(sum == k){
                    ans++;
                }
            }
            sum = 0;
        }
        return ans;
    }
};
